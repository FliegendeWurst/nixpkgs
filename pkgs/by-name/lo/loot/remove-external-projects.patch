diff --git a/CMakeLists.txt b/CMakeLists.txt
index a98c3213..e7992051 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -68,53 +68,6 @@ ExternalProject_Get_Property(GTest SOURCE_DIR BINARY_DIR)
 set(GTEST_INCLUDE_DIRS "${SOURCE_DIR}/googletest/include")
 set(GTEST_LIBRARIES "${BINARY_DIR}/lib/${CMAKE_CFG_INTDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}gtest$<$<CONFIG:Debug>:d>${CMAKE_STATIC_LIBRARY_SUFFIX}")
 
-if(NOT DEFINED LIBLOOT_URL)
-    if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
-        set(LIBLOOT_URL "https://github.com/loot/libloot/releases/download/0.22.1/libloot-0.22.1-win64.7z")
-        set(LIBLOOT_HASH "SHA256=7575c369602b96088fdcdf2971372868e270ec8f755ee8f2e996382d4c62fc42")
-    else()
-        set(LIBLOOT_URL "https://github.com/loot/libloot/releases/download/0.22.1/libloot-0.22.1-Linux.tar.xz")
-        set(LIBLOOT_HASH "SHA256=ad1c36bf3d314a9b6493d5a64ecf4969e719a66a9c3a0a9ea3fbd5d127243d9a")
-    endif()
-endif()
-
-ExternalProject_Add(libloot
-    PREFIX "external"
-    URL ${LIBLOOT_URL}
-    URL_HASH ${LIBLOOT_HASH}
-    CONFIGURE_COMMAND ""
-    BUILD_COMMAND ""
-    INSTALL_COMMAND "")
-ExternalProject_Get_Property(libloot SOURCE_DIR)
-set(LIBLOOT_INCLUDE_DIRS "${SOURCE_DIR}/include")
-if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
-    set(LIBLOOT_STATIC_LIBRARY "${SOURCE_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}loot.dll${CMAKE_STATIC_LIBRARY_SUFFIX}")
-else()
-    set(LIBLOOT_STATIC_LIBRARY "${SOURCE_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}loot${CMAKE_STATIC_LIBRARY_SUFFIX}")
-endif()
-set(LIBLOOT_SHARED_LIBRARY "${SOURCE_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}loot${CMAKE_SHARED_LIBRARY_SUFFIX}")
-
-if(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
-    set(ZLIB_LIB_NAME "zlibstatic$<$<CONFIG:Debug>:d>${CMAKE_STATIC_LIBRARY_SUFFIX}")
-elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
-    set(ZLIB_LIB_NAME "${CMAKE_STATIC_LIBRARY_PREFIX}zlibstatic$<$<CONFIG:Debug>:d>${CMAKE_STATIC_LIBRARY_SUFFIX}")
-else()
-    set(ZLIB_LIB_NAME "${CMAKE_STATIC_LIBRARY_PREFIX}z${CMAKE_STATIC_LIBRARY_SUFFIX}")
-endif()
-
-ExternalProject_Add(zlib
-    PREFIX "external"
-    URL "https://github.com/madler/zlib/archive/refs/tags/v1.3.tar.gz"
-    URL_HASH "SHA256=b5b06d60ce49c8ba700e0ba517fa07de80b5d4628a037f4be8ad16955be7a7c0"
-    CMAKE_ARGS
-        -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
-    INSTALL_COMMAND ""
-    BUILD_IN_SOURCE TRUE)
-ExternalProject_Get_Property(zlib SOURCE_DIR BINARY_DIR)
-set(ZLIB_ROOT ${SOURCE_DIR})
-set(ZLIB_LIBRARY
-    "${BINARY_DIR}/${CMAKE_CFG_INTDIR}/${ZLIB_LIB_NAME}")
-
 ExternalProject_Add(minizip-ng
     PREFIX "external"
     URL "https://github.com/zlib-ng/minizip-ng/archive/refs/tags/4.0.1.tar.gz"
@@ -134,8 +87,7 @@ ExternalProject_Add(minizip-ng
         -DZLIB_ROOT=${ZLIB_ROOT}
         -DZLIB_LIBRARY=${ZLIB_LIBRARY}
         -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
-    INSTALL_COMMAND ""
-    DEPENDS zlib)
+    INSTALL_COMMAND "")
 ExternalProject_Get_Property(minizip-ng SOURCE_DIR BINARY_DIR)
 set(MINIZIP_NG_INCLUDE_DIRS "${SOURCE_DIR}")
 set(MINIZIP_NG_LIBRARIES
@@ -150,13 +102,6 @@ ExternalProject_Add(testing-plugins
     BUILD_COMMAND ""
     INSTALL_COMMAND "")
 
-FetchContent_Declare(
-    tomlplusplus
-    URL "https://github.com/marzer/tomlplusplus/archive/v3.3.0.tar.gz"
-    URL_HASH "SHA256=fc1a5eb410f3c67e90e5ad1264a1386d020067cfb01b633cc8c0441789aa6cf2"
-)
-FetchContent_MakeAvailable(tomlplusplus)
-
 ExternalProject_Add(spdlog
     PREFIX "external"
     URL "https://github.com/gabime/spdlog/archive/v1.12.0.tar.gz"
@@ -484,14 +429,14 @@ endif()
 
 # Build Qt application.
 add_executable(LOOT ${LOOT_ALL_SOURCES})
-add_dependencies(LOOT libloot minizip-ng spdlog ValveFileVDF OGDF)
+add_dependencies(LOOT ValveFileVDF)
 target_link_libraries(LOOT PRIVATE
     Qt::Widgets Qt::Network Boost::locale ${MINIZIP_NG_LIBRARIES} ${OGDF_LIBRARIES})
 
 # Build application tests.
 add_executable(loot_gui_tests ${LOOT_GUI_TESTS_ALL_SOURCES})
 add_dependencies(loot_gui_tests
-    libloot minizip-ng spdlog ValveFileVDF GTest testing-plugins)
+    ValveFileVDF GTest testing-plugins)
 target_link_libraries(loot_gui_tests PRIVATE
     Qt::Widgets Qt::Network Qt::Test Boost::locale ${MINIZIP_NG_LIBRARIES} ${GTEST_LIBRARIES})
 
